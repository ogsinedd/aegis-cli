package utils

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"path/filepath"
	"time"

	"github.com/aegis/aegis-cli/pkg/config"
	"github.com/aegis/aegis-cli/pkg/models"
	"github.com/gen2brain/beeep"
	"github.com/sirupsen/logrus"
)

// NotificationManager —É–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
type NotificationManager struct {
	config *config.CliConfig
	logger *logrus.Logger
}

// TelegramMessage –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram API
type TelegramMessage struct {
	ChatID    string `json:"chat_id"`
	Text      string `json:"text"`
	ParseMode string `json:"parse_mode,omitempty"`
}

// NewNotificationManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func NewNotificationManager(cfg *config.CliConfig, logger *logrus.Logger) *NotificationManager {
	return &NotificationManager{
		config: cfg,
		logger: logger,
	}
}

// SendScanCompletedNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
func (n *NotificationManager) SendScanCompletedNotification(
	hostName, containerName string, 
	vulns []models.Vulnerability, 
	scanDuration time.Duration) error {
	
	if !n.config.Notification.Enabled {
		return nil
	}

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	title := "Aegis: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
	message := fmt.Sprintf("–•–æ—Å—Ç: %s\n–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: %s\n–ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: %d\n–í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: %s", 
		hostName, containerName, len(vulns), scanDuration.String())
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	if err := beeep.Notify(title, message, ""); err != nil {
		n.logger.WithError(err).Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
	if n.config.Notification.TelegramBot && 
		n.config.Notification.TelegramToken != "" && 
		n.config.Notification.TelegramChatID != "" {
		
		// –§–æ—Ä–º–∏—Ä—É–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
		var telegramMsg string
		telegramMsg = fmt.Sprintf("*%s*\n\n", title)
		telegramMsg += fmt.Sprintf("üñ• *–•–æ—Å—Ç:* %s\n", hostName)
		telegramMsg += fmt.Sprintf("üê≥ *–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä:* %s\n", containerName)
		telegramMsg += fmt.Sprintf("‚è± *–í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:* %s\n\n", scanDuration.String())
		
		// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º
		var criticalCount, highCount, mediumCount, lowCount int
		for _, v := range vulns {
			switch v.Severity {
			case "CRITICAL":
				criticalCount++
			case "HIGH":
				highCount++
			case "MEDIUM":
				mediumCount++
			case "LOW":
				lowCount++
			}
		}
		
		telegramMsg += "*–ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏:*\n"
		telegramMsg += fmt.Sprintf("üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: %d\n", criticalCount)
		telegramMsg += fmt.Sprintf("üü† –í—ã—Å–æ–∫–∏—Ö: %d\n", highCount)
		telegramMsg += fmt.Sprintf("üü° –°—Ä–µ–¥–Ω–∏—Ö: %d\n", mediumCount)
		telegramMsg += fmt.Sprintf("üü¢ –ù–∏–∑–∫–∏—Ö: %d\n", lowCount)
		telegramMsg += fmt.Sprintf("*–í—Å–µ–≥–æ:* %d\n", len(vulns))
		
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
		if err := n.sendTelegramMessage(telegramMsg); err != nil {
			n.logger.WithError(err).Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram")
		}
	}
	
	return nil
}

// SendScanErrorNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
func (n *NotificationManager) SendScanErrorNotification(
	hostName, containerName string, 
	errorMsg string) error {
	
	if !n.config.Notification.Enabled {
		return nil
	}

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	title := "Aegis: –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
	message := fmt.Sprintf("–•–æ—Å—Ç: %s\n–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: %s\n–û—à–∏–±–∫–∞: %s", 
		hostName, containerName, errorMsg)
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	if err := beeep.Notify(title, message, ""); err != nil {
		n.logger.WithError(err).Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
	if n.config.Notification.TelegramBot && 
		n.config.Notification.TelegramToken != "" && 
		n.config.Notification.TelegramChatID != "" {
		
		// –§–æ—Ä–º–∏—Ä—É–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
		var telegramMsg string
		telegramMsg = fmt.Sprintf("*%s*\n\n", title)
		telegramMsg += fmt.Sprintf("üñ• *–•–æ—Å—Ç:* %s\n", hostName)
		telegramMsg += fmt.Sprintf("üê≥ *–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä:* %s\n", containerName)
		telegramMsg += fmt.Sprintf("‚ùå *–û—à–∏–±–∫–∞:* %s\n", errorMsg)
		
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
		if err := n.sendTelegramMessage(telegramMsg); err != nil {
			n.logger.WithError(err).Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram")
		}
	}
	
	return nil
}

// SendTelegramReport –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ –≤ Telegram
func (n *NotificationManager) SendTelegramReport(
	hostName, containerName string, 
	filePath string) error {
	
	if !n.config.Notification.Enabled || 
		!n.config.Notification.TelegramBot || 
		n.config.Notification.TelegramToken == "" || 
		n.config.Notification.TelegramChatID == "" {
		return nil
	}
	
	// –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
	caption := fmt.Sprintf("*–û—Ç—á–µ—Ç –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏*\n\nüñ• *–•–æ—Å—Ç:* %s\nüê≥ *–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä:* %s", 
		hostName, containerName)
	
	// –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø MIME —Ñ–∞–π–ª–∞
	fileType := "application/json"
	if filepath.Ext(filePath) == ".csv" {
		fileType = "text/csv"
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram
	if err := n.sendTelegramFile(filePath, fileType, caption); err != nil {
		n.logger.WithError(err).Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –≤ Telegram")
		return err
	}
	
	return nil
}

// sendTelegramMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
func (n *NotificationManager) sendTelegramMessage(message string) error {
	url := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", 
		n.config.Notification.TelegramToken)
	
	telegramMsg := TelegramMessage{
		ChatID:    n.config.Notification.TelegramChatID,
		Text:      message,
		ParseMode: "Markdown",
	}
	
	jsonData, err := json.Marshal(telegramMsg)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ JSON: %w", err)
	}
	
	resp, err := http.Post(url, "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ HTTP –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()
	
	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ API Telegram: %s", string(body))
	}
	
	return nil
}

// sendTelegramFile –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤ Telegram
func (n *NotificationManager) sendTelegramFile(filePath, fileType, caption string) error {
	url := fmt.Sprintf("https://api.telegram.org/bot%s/sendDocument", 
		n.config.Notification.TelegramToken)
	
	// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
	file, err := os.Open(filePath)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: %w", err)
	}
	defer file.Close()
	
	// –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è multipart/form-data –∑–∞–ø—Ä–æ—Å–∞
	var requestBody bytes.Buffer
	
	// –î–æ–±–∞–≤–ª—è–µ–º chat_id
	requestBody.WriteString("--boundary\r\n")
	requestBody.WriteString("Content-Disposition: form-data; name=\"chat_id\"\r\n\r\n")
	requestBody.WriteString(n.config.Notification.TelegramChatID + "\r\n")
	
	// –î–æ–±–∞–≤–ª—è–µ–º caption —Å Markdown
	requestBody.WriteString("--boundary\r\n")
	requestBody.WriteString("Content-Disposition: form-data; name=\"caption\"\r\n\r\n")
	requestBody.WriteString(caption + "\r\n")
	requestBody.WriteString("--boundary\r\n")
	requestBody.WriteString("Content-Disposition: form-data; name=\"parse_mode\"\r\n\r\n")
	requestBody.WriteString("Markdown\r\n")
	
	// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
	requestBody.WriteString("--boundary\r\n")
	requestBody.WriteString(fmt.Sprintf("Content-Disposition: form-data; name=\"document\"; filename=\"%s\"\r\n", 
		filepath.Base(filePath)))
	requestBody.WriteString(fmt.Sprintf("Content-Type: %s\r\n\r\n", fileType))
	
	// –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –±—É—Ñ–µ—Ä
	if _, err := io.Copy(&requestBody, file); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ –±—É—Ñ–µ—Ä: %w", err)
	}
	
	requestBody.WriteString("\r\n--boundary--\r\n")
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	req, err := http.NewRequest("POST", url, &requestBody)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	
	req.Header.Set("Content-Type", "multipart/form-data; boundary=boundary")
	
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ HTTP –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()
	
	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ API Telegram: %s", string(body))
	}
	
	return nil
} 
